/*
 * Vige, Home of Professional Open Source
 * Copyright 2010, Vige, and individual contributors
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package it.vige.magazzino.test;

import static it.vige.magazzino.test.Dependencies.FACES;
import static it.vige.magazzino.test.Dependencies.INTERNATIONAL;
import static it.vige.magazzino.test.Dependencies.RICHFACES;
import static it.vige.magazzino.test.Dependencies.SOLDER;
import static it.vige.magazzino.test.Utils.tempFile;
import static it.vige.magazzino.test.Utils.toHexString;
import it.vige.magazzino.DataContainer;
import it.vige.magazzino.model.Address;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.EmptyAsset;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(Arquillian.class)
public class AddressAgentTest {
	@Deployment
	public static WebArchive createDeployment() {
		WebArchive war = ShrinkWrap
				.create(WebArchive.class, "test.war")
				.addPackages(true, DataContainer.class.getPackage())
				.addAsLibraries(INTERNATIONAL)
				.addAsLibraries(FACES)
				.addAsLibraries(SOLDER)
				.addAsLibraries(RICHFACES)
				.addAsWebInfResource("test-web.xml", "web.xml")
				.addAsWebInfResource("test-persistence.xml",
						"classes/META-INF/persistence.xml")
				.addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml");
		System.out.println(war.toString(true));
		return war;
	}

	static final String[] hexCodes = {
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000d7069617a7a6120436c6f64696f7400053030313232740004526f6d657400023534740005313939383774000e72657172657740766967652e697474000a373635343334353637367400083634373436353637740002524d74000b777765776577652e636f6d740008477569646f6e6961",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000d7669616c65204d617a7a696e6974000530303133347400064c6f6e646f6e740002363774000431313737740010686764666773666740766967652e697474000c3334363335373436353733367400093533343533373434367400024c4f740008666466642e636f6d74000a536574746576696c6c65",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000e7069617a7a6120426f6c6f676e617400053030323334740007426f6c6f676e617400023333740005393837363674000f6166616466736440766967652e697474000a3838373536343537333274000a35343235333536343537740002424f74000a7777716577722e636f6d74000b536574746563616d696e69",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e000178707400137669616c65204769756c696f204365736172657400053030393837740008466c6f72656e63657400033635367400053131313231740011686468686a6467686640766967652e69747400083332343536373333740009383936393639363837740002464974000971617361732e636f6d7400065469766f6c69",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000c766961205469627574696e61740005303132333474000550617269737400023334740005353435363674001166647366736466736440766967652e697474000a323433363233333435337400083233343233343233740002504174000b66666b6b666b662e636f6d74000b4672616e636f666f727465",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000e766961205072656e657374696e6174000530303135327400075368616e6761697400023234740005333433323274001167646864676a66676a40766967652e697474000b383435363233353436353674000b3837353834373334363337740002534874000970706f706f2e636f6d7400085a616761726f6c6f",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000e7069617a7a6120547573636f6c6f7400053030303132740006426f6d6261797400023736740005323232323274001166736466736466736440766967652e697474000b373436383437333634333374000b3332363738343735333233740002424f7400076577652e636f6d7400044e6f6c61",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000d76696120547573636f6c616e617400053039383333740004526f6d65740003353436740005353535353574000d747974726540766967652e697474000937353436383433333374000b3432363735343733333634740002524d74000973777377642e636f6d74000e43617374656c766f6c7475726e6f",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000c766961205365726166696e6974000530303939397400054b796f746f740002363674000333323574000e65777265746540766967652e697474000a373536383437333633347400093533343734383632327400024b5974000a6577657777712e636f6d74000654726f706561",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000c766961205365726166696e617400053030363636740005546f6b796f7400023333740004363433337400106e676e676867686740766967652e697474000a3334363734363837333374000b3633353634383332373634740002544b7400086c6c6b6c6b2e697474000850616c696e75726f",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000d7069617a7a6120436c6f64696f7400053031313232740004526f6d6574000235347400043433353374000e72657172657740766967652e6974740007373635313637367400083634373436353637740002524d74000b777765776577652e636f6d740008477569646f6e6961",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000d7669616c65204d617a7a696e6974000530303131347400064c6f6e646f6e7400023637740003323232740010686764666773666740766967652e697474000a333436333136353733367400063533313434367400024c4f740008666466642e636f6d74000a536574746576696c6c65",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000e7069617a7a6120426f6c6f676e617400053030323334740007426f6c6f676e617400023333740005373634333574000f6166616466736440766967652e697474000d3838373131313536343537333274000b3534323533353136343537740002424f74000a7777716577722e636f6d74000b536574746563616d696e69",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e000178707400137669616c65204769756c696f204365736172657400053030393837740008466c6f72656e6365740004363532367400053233353637740011686468686a6467686640766967652e69747400083332343536373333740009383936393639363837740002464974000971617361732e636f6d7400065469766f6c69",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000c766961205469627574696e6174000530313233347400055061726973740002333474000338373674001166647366736466736440766967652e697474000a323433363233333435337400083233343233343233740002504174000b66666b6b666b662e636f6d74000b4672616e636f666f727465",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000e766961205072656e657374696e6174000530303135327400075368616e67616974000331323474000333343574001167646864676a66676a40766967652e697474000b383435363233353436353674000b3837353834373334363337740002534874000970706f706f2e636f6d7400085a616761726f6c6f",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000e7069617a7a6120547573636f6c6f7400053030323132740006426f6d62617974000337313674000337363474001166736466736466736440766967652e697474000b373436383437333634333374000b3332363738343735333233740002424f7400076577652e636f6d7400044e6f6c61",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000d76696120547573636f6c616e617400053039383333740004526f6d657400033534367400043334353474000d747974726540766967652e697474000937353436383433333374000b3432363735343733333634740002524d74000973777377642e636f6d74000e43617374656c766f6c7475726e6f",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000c766961205365726166696e6974000530303939397400054b796f746f7400033631367400043736353474000e65777265746540766967652e697474000a373536383437333633347400093533343734383632327400024b5974000a6577657777712e636f6d74000654726f706561",
			"aced00057372001f69742e766967652e6d6167617a7a696e6f2e6d6f64656c2e416464726573735163bec74313b40902000b4c0007616464726573737400124c6a6176612f6c616e672f537472696e673b4c000363617071007e00014c00046369747971007e00014c000b63697669634e756d62657271007e00014c0004636f646571007e00014c0005656d61696c71007e00014c000366617871007e00014c000570686f6e6571007e00014c000870726f76696e636571007e00014c00047369746571007e00014c0004746f776e71007e0001787074000c766961205365726166696e617400053030363636740005546f6b796f740002333374000532333435337400106e676e676867686740766967652e697474000a3334363734363837333374000b3633353634383332373634740002544b7400086c6c6b6c6b2e697474000850616c696e75726f" };

	@Inject
	UserTransaction utx;

	@PersistenceContext
	EntityManager em;

	@Test
	public void createAddress() throws Exception {
		utx.begin();
		em.joinTransaction();

		em.persist(address("19987", "piazza Clodio", "00122", "64746567",
				"7654345676", "reqrew@vige.it", "wwewewe.com", "54", "RM",
				"Guidonia", "Rome", hexCodes[0]));
		em.persist(address("1177", "viale Mazzini", "00134", "534537446",
				"346357465736", "hgdfgsfg@vige.it", "fdfd.com", "67", "LO",
				"Setteville", "London", hexCodes[1]));
		em.persist(address("98766", "piazza Bologna", "00234", "5425356457",
				"8875645732", "afadfsd@vige.it", "wwqewr.com", "33", "BO",
				"Settecamini", "Bologna", hexCodes[2]));
		em.persist(address("11121", "viale Giulio Cesare", "00987",
				"896969687", "32456733", "hdhhjdghf@vige.it", "qasas.com",
				"656", "FI", "Tivoli", "Florence", hexCodes[3]));
		em.persist(address("54566", "via Tibutina", "01234", "23423423",
				"2436233453", "fdsfsdfsd@vige.it", "ffkkfkf.com", "34", "PA",
				"Francoforte", "Paris", hexCodes[4]));
		em.persist(address("34322", "via Prenestina", "00152", "87584734637",
				"84562354656", "gdhdgjfgj@vige.it", "ppopo.com", "24", "SH",
				"Zagarolo", "Shangai", hexCodes[5]));
		em.persist(address("22222", "piazza Tuscolo", "00012", "32678475323",
				"74684736433", "fsdfsdfsd@vige.it", "ewe.com", "76", "BO",
				"Nola", "Bombay", hexCodes[6]));
		em.persist(address("55555", "via Tuscolana", "09833", "42675473364",
				"754684333", "tytre@vige.it", "swswd.com", "546", "RM",
				"Castelvolturno", "Rome", hexCodes[7]));
		em.persist(address("325", "via Serafini", "00999", "534748622",
				"7568473634", "ewrete@vige.it", "ewewwq.com", "66", "KY",
				"Tropea", "Kyoto", hexCodes[8]));
		em.persist(address("6433", "via Serafina", "00666", "63564832764",
				"3467468733", "ngnghghg@vige.it", "llklk.it", "33", "TK",
				"Palinuro", "Tokyo", hexCodes[9]));
		em.persist(address("4353", "piazza Clodio", "01122", "64746567",
				"7651676", "reqrew@vige.it", "wwewewe.com", "54", "RM",
				"Guidonia", "Rome", hexCodes[10]));
		em.persist(address("222", "viale Mazzini", "00114", "531446",
				"3463165736", "hgdfgsfg@vige.it", "fdfd.com", "67", "LO",
				"Setteville", "London", hexCodes[11]));
		em.persist(address("76435", "piazza Bologna", "00234", "54253516457",
				"8871115645732", "afadfsd@vige.it", "wwqewr.com", "33", "BO",
				"Settecamini", "Bologna", hexCodes[12]));
		em.persist(address("23567", "viale Giulio Cesare", "00987",
				"896969687", "32456733", "hdhhjdghf@vige.it", "qasas.com",
				"6526", "FI", "Tivoli", "Florence", hexCodes[13]));
		em.persist(address("876", "via Tibutina", "01234", "23423423",
				"2436233453", "fdsfsdfsd@vige.it", "ffkkfkf.com", "34", "PA",
				"Francoforte", "Paris", hexCodes[14]));
		em.persist(address("345", "via Prenestina", "00152", "87584734637",
				"84562354656", "gdhdgjfgj@vige.it", "ppopo.com", "124", "SH",
				"Zagarolo", "Shangai", hexCodes[15]));
		em.persist(address("764", "piazza Tuscolo", "00212", "32678475323",
				"74684736433", "fsdfsdfsd@vige.it", "ewe.com", "716", "BO",
				"Nola", "Bombay", hexCodes[16]));
		em.persist(address("3454", "via Tuscolana", "09833", "42675473364",
				"754684333", "tytre@vige.it", "swswd.com", "546", "RM",
				"Castelvolturno", "Rome", hexCodes[17]));
		em.persist(address("7654", "via Serafini", "00999", "534748622",
				"7568473634", "ewrete@vige.it", "ewewwq.com", "616", "KY",
				"Tropea", "Kyoto", hexCodes[18]));
		em.persist(address("23453", "via Serafina", "00666", "63564832764",
				"3467468733", "ngnghghg@vige.it", "llklk.it", "33", "TK",
				"Palinuro", "Tokyo", hexCodes[19]));
		utx.commit();
	}

	@Test
	public void searchAddress() throws Exception {
		Assert.assertEquals(20, em.createQuery("select b from Address b")
				.getResultList().size());
	}

	public Address address(String code, String homeAddress, String cap,
			String phone, String fax, String email, String site,
			String civicNumber, String province, String town, String city,
			String hexCode) throws Exception {
		Address address = new Address();
		address.setCode(code);
		address.setAddress(homeAddress);
		address.setCap(cap);
		address.setCity(city);
		address.setCivicNumber(civicNumber);
		address.setEmail(email);
		address.setFax(fax);
		address.setPhone(phone);
		address.setSite(site);
		address.setTown(town);
		address.setProvince(province);

		java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(
				new java.io.FileOutputStream(tempFile));
		oos.writeObject(address);
		oos.close();
		byte[] bytes = new byte[351];
		java.io.FileInputStream fis = new java.io.FileInputStream(tempFile);
		fis.read(bytes);
		fis.close();
		String result = toHexString(bytes);
		System.out.println(result);
		java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
				new java.io.ByteArrayInputStream(bytes));
		Address addressRead = (Address) ois.readObject();
		Assert.assertEquals(addressRead.getEmail(), email);
		// Assert.assertEquals(result, hexCode);
		ois.close();
		return addressRead;
	}
}
